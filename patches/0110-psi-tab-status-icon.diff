--- a/options/default.xml
+++ b/options/default.xml
@@ -354,6 +354,7 @@
 				<recent-jids type="QStringList" />
 			</service-discovery>
 			<tabs>
+				<show-tab-icons type="bool">true</show-tab-icons>
 				<put-tabs-at-bottom type="bool">false</put-tabs-at-bottom>
 				<use-tabs type="bool">false</use-tabs>
 				<size type="QString"></size> <!-- will be invalid when converted to QSize so we can detect first load -->
--- a/src/chatdlg.cpp
+++ b/src/chatdlg.cpp
@@ -182,15 +182,6 @@ void ChatDlg::initActions()
 	connect(act_scrolldown_, SIGNAL(triggered()), chatView(), SLOT(scrollDown()));
 }
 
-void ChatDlg::ensureTabbedCorrectly()
-{
-	TabbableWidget::ensureTabbedCorrectly();
-	setShortcuts();
-	if(!isTabbed() && geometryOptionPath().isEmpty()) {
-		setGeometryOptionPath(geometryOption);
-	}
-}
-
 void ChatDlg::ackLastMessages(int a)
 {
 	Q_UNUSED(a);
@@ -423,6 +414,18 @@ UserStatus userStatusFor(const Jid& jid, QList<UserListItem*> ul, bool forceEmpt
 	return u;
 }
 
+void ChatDlg::ensureTabbedCorrectly()
+{
+	TabbableWidget::ensureTabbedCorrectly();
+	setShortcuts();
+	QList<UserListItem*> ul = account()->findRelevant(jid());
+	UserStatus userStatus = userStatusFor(jid(), ul, false);
+	setTabIcon(PsiIconset::instance()->statusPtr(jid(), userStatus.statusType)->icon());
+	if(!isTabbed() && geometryOptionPath().isEmpty()) {
+		setGeometryOptionPath(geometryOption);
+	}
+}
+
 void ChatDlg::updateContact(const Jid &j, bool fromPresence)
 {
 	// if groupchat, only update if the resource matches
--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -759,6 +759,13 @@ void GCMainDlg::ensureTabbedCorrectly()
 	QList<int> tmp = ui_.hsplitter->sizes();
 	ui_.hsplitter->setSizes(QList<int>() << 0);
 	ui_.hsplitter->setSizes(tmp);
+	UserListItem* u = account()->find(jid().bare());
+	if(u) {
+		setTabIcon(PsiIconset::instance()->statusPtr(u)->icon());
+	}
+	else {
+		setStatusTabIcon((d->state == Private::Connected ? STATUS_ONLINE : STATUS_OFFLINE));
+	}
 	if(!isTabbed() && geometryOptionPath().isEmpty()) {
 		setGeometryOptionPath(geometryOption);
 	}
@@ -1053,6 +1060,7 @@ void GCMainDlg::goDisc()
 	if(d->state != Private::Idle && d->state != Private::ForcedLeave) {
 		d->state = Private::Idle;
 		ui_.pb_topic->setEnabled(false);
+		setStatusTabIcon(STATUS_OFFLINE);
 		appendSysMsg(tr("Disconnected."), true);
 		ui_.mle->chatEdit()->setEnabled(false);
 	}
@@ -1145,6 +1153,7 @@ PsiAccount* GCMainDlg::account() const
 void GCMainDlg::error(int, const QString &str)
 {
 	ui_.pb_topic->setEnabled(false);
+	setStatusTabIcon(STATUS_ERROR);
 
 	if(d->state == Private::Connecting)
 		appendSysMsg(tr("Unable to join groupchat.	Reason: %1").arg(str), true);
@@ -1198,6 +1207,8 @@ void GCMainDlg::presence(const QString &nick, const Status &s)
 	}
 
 	if (nick == d->self) {
+		if(s.isAvailable())
+			setStatusTabIcon(s.type());
 		// Update configuration dialog
 		if (d->configDlg) {
 			d->configDlg->setRoleAffiliation(s.mucItem().role(),s.mucItem().affiliation());
@@ -1472,6 +1483,7 @@ void GCMainDlg::joined()
 		ui_.lv_users->clear();
 		d->state = Private::Connected;
 		ui_.pb_topic->setEnabled(true);
+		setStatusTabIcon(STATUS_ONLINE);
 		ui_.mle->chatEdit()->setEnabled(true);
 		setConnecting();
 		appendSysMsg(tr("Connected."), true);
@@ -1779,6 +1791,11 @@ int GCMainDlg::unreadMessageCount() const
 	return d->pending;
 }
 
+void GCMainDlg::setStatusTabIcon(int status)
+{
+	setTabIcon(PsiIconset::instance()->statusPtr(jid(), status)->icon());
+}
+
 //----------------------------------------------------------------------------
 // GCFindDlg
 //----------------------------------------------------------------------------
--- a/src/groupchatdlg.h
+++ b/src/groupchatdlg.h
@@ -94,6 +94,7 @@ protected:
 	void dropEvent(QDropEvent *);
 	void closeEvent(QCloseEvent *);
 	void mucInfoDialog(const QString& title, const QString& message, const Jid& actor, const QString& reason);
+	void setStatusTabIcon(int status);
 
 signals:
 	void aSend(const Message &);
--- a/src/psichatdlg.cpp
+++ b/src/psichatdlg.cpp
@@ -180,6 +180,7 @@ void PsiChatDlg::initUi()
 
 	PsiToolTip::install(ui_.lb_status);
 	ui_.lb_status->setPsiIcon(IconsetFactory::iconPtr("status/noauth"));
+	setTabIcon(IconsetFactory::iconPtr("status/noauth")->icon());
 
 	ui_.tb_emoticons->setIcon(IconsetFactory::icon("psi/smile").icon());
 
@@ -414,6 +415,7 @@ void PsiChatDlg::contactUpdated(UserListItem* u, int status, const QString& stat
 
 	if (unacked_messages == 0) {
 		ui_.lb_status->setPsiIcon(current_status_icon);
+		setTabIcon(current_status_icon->icon());//FIXME
 	} else {
 		ui_.lb_status->setPsiIcon(throbber_icon);
 	}
--- a/src/tabs/tabbablewidget.cpp
+++ b/src/tabs/tabbablewidget.cpp
@@ -209,3 +209,20 @@ void TabbableWidget::changeEvent(QEvent* event)
 		}
 	}
 }
+
+/**
+ * Set the icon of the tab.
+ */
+void TabbableWidget::setTabIcon(const QIcon &icon)
+{
+	icon_ = icon;
+	TabDlg* tabDlg = tabManager_->getManagingTabs(this);
+	if (tabDlg) {
+		tabDlg->setTabIcon(this, icon);
+	}
+}
+
+const QIcon &TabbableWidget::icon() const
+{
+	return icon_;
+}
--- a/src/tabs/tabbablewidget.h
+++ b/src/tabs/tabbablewidget.h
@@ -21,6 +21,7 @@
 #ifndef TABBABLE_H
 #define TABBABLE_H
 
+#include <QIcon>
 #include "advwidget.h"
 #include "im.h" // ChatState
 
@@ -42,6 +43,8 @@ public:
 	~TabbableWidget();
 
 	PsiAccount* account() const;
+	void setTabIcon(const QIcon &);
+	const QIcon &icon() const;
 
 	virtual Jid jid() const;
 	virtual const QString & getDisplayName();
@@ -86,6 +89,7 @@ private:
 	Jid jid_;
 	PsiAccount *pa_;
 	TabManager *tabManager_;
+	QIcon icon_;
 };
 
 #endif
--- a/src/tabs/tabdlg.cpp
+++ b/src/tabs/tabdlg.cpp
@@ -398,7 +398,7 @@ void TabDlg::addTab(TabbableWidget* tab)
 {
 	setUpdatesEnabled(false);
 	tabs_.append(tab);
-	tabWidget_->addTab(tab, captionForTab(tab));
+	tabWidget_->addTab(tab, captionForTab(tab), tab->icon());
 
 	connect(tab, SIGNAL(invalidateTabInfo()), SLOT(updateTab()));
 	connect(tab, SIGNAL(updateFlashState()), SLOT(updateFlashState()));
@@ -593,12 +593,15 @@ void TabDlg::updateTab(TabbableWidget* chat)
 
 	if (chat->state() == TabbableWidget::StateComposing) {
 		tabWidget_->setTabTextColor(chat, Qt::darkGreen);
+		tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/typing")->icon());
 	}
 	else if (chat->unreadMessageCount()) {
 		tabWidget_->setTabTextColor(chat, Qt::red);
+		tabWidget_->setTabIcon(chat, IconsetFactory::iconPtr("psi/chat")->icon());
 	}
 	else {
 		tabWidget_->setTabTextColor(chat, palette().windowText().color());
+		tabWidget_->setTabIcon(chat, chat->icon());
 	}
 	updateCaption();
 }
@@ -812,3 +815,11 @@ void TabDlg::setSimplifiedCaptionEnabled(bool enabled)
 	simplifiedCaption_ = enabled;
 	updateCaption();
 }
+
+/**
+ * Set the icon of the tab.
+ */
+void TabDlg::setTabIcon(QWidget *widget,const QIcon &icon)
+{
+	tabWidget_->setTabIcon(widget, icon);
+}
--- a/src/tabs/tabdlg.h
+++ b/src/tabs/tabdlg.h
@@ -86,6 +86,7 @@ public:
 	void setUserManagementEnabled(bool enabled); // default enabled
 	void setTabBarShownForSingles(bool enabled); // default enabled
 	void setSimplifiedCaptionEnabled(bool enabled); // default disabled
+	void setTabIcon(QWidget *,const QIcon &);
 
 protected:
 	void setShortcuts();
--- a/src/widgets/psitabwidget.cpp
+++ b/src/widgets/psitabwidget.cpp
@@ -21,6 +21,7 @@
 #include "psitabwidget.h"
 #include "psitabbar.h"
 #include "common.h"
+#include "psioptions.h"
 #include <QWidget>
 #include <QVBoxLayout>
 #include <QHBoxLayout>
@@ -155,14 +156,18 @@ int PsiTabWidget::currentPageIndex() {
 /**
  * Add the Widget to the tab stack.
  */
-void PsiTabWidget::addTab(QWidget *widget, QString name) {
+void PsiTabWidget::addTab(QWidget *widget, QString name, const QIcon &icon)
+{
 	Q_ASSERT(widget);
 	if (widgets_.contains(widget)) {
 		return;
 	}
 	widgets_.append(widget);
 	stacked_->addWidget(widget);
-	tabBar_->addTab(name);
+	if (PsiOptions::instance()->getOption("options.ui.tabs.show-tab-icons").toBool())
+		tabBar_->addTab(icon, name);
+	else
+		tabBar_->addTab(name);
 	showPage(currentPage());
 }
 
@@ -230,6 +235,18 @@ void PsiTabWidget::setTabText(QWidget* widget, const QString& label) {
 	tabBar_->setTabText(index, label);
 }
 
+/**
+ * Set the icon of the tab.
+ */
+void PsiTabWidget::setTabIcon(QWidget *widget, const QIcon &icon)
+{
+	int index = getIndex(widget);
+	if (index == -1 || !PsiOptions::instance()->getOption("options.ui.tabs.show-tab-icons").toBool()) {
+		return;
+	}
+	tabBar_->setTabIcon(index, icon);
+}
+
 void PsiTabWidget::setCurrentPage(int index) {
 	if (index >= 0 && index < count()) {
 		showPage(widgets_[index]);
--- a/src/widgets/psitabwidget.h
+++ b/src/widgets/psitabwidget.h
@@ -48,7 +48,7 @@ public:
 	QWidget *currentPage();
 	int currentPageIndex();
 	QWidget *widget(int index);
-	void addTab(QWidget *, QString);
+	void addTab(QWidget *, QString, const QIcon &icon = QIcon());
 	void showPage(QWidget *);
 	void showPageDirectly(QWidget *);
 
@@ -56,6 +56,7 @@ public:
 	QWidget* page(int index);
 	int getIndex(QWidget *);
 	void setTabText(QWidget *, const QString &);
+	void setTabIcon(QWidget *, const QIcon &);
 	void setTabPosition(QTabWidget::TabPosition pos);
 	void setCloseIcon(const QIcon &);
 
