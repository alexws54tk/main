Заходим в «iris»
Заходим в «src/libpsi»
--- a/options/default.xml
+++ b/options/default.xml
@@ -565,6 +565,27 @@ QLineEdit#le_status_text {
 				<help_about_qt type="QKeySequence" comment="About Qt"></help_about_qt>
 				<help_diag_qcaplugin type="QKeySequence" comment="QCA plugin diag"></help_diag_qcaplugin>
 				<help_diag_qcakeystore type="QKeySequence" comment="QCA key store diag"></help_diag_qcakeystore>
+				<chat_active_contacts type="QKeySequence"></chat_active_contacts>
+				<chat_add_contact type="QKeySequence"></chat_add_contact>
+				<chat_clear type="QKeySequence"></chat_clear>
+				<chat_compact type="QKeySequence"></chat_compact>
+				<chat_file type="QKeySequence"></chat_file>
+				<chat_find type="QKeySequence"></chat_find>
+				<chat_history type="QKeySequence"></chat_history>
+				<chat_html_text type="QKeySequence"></chat_html_text>
+				<chat_icon type="QKeySequence"></chat_icon>
+				<chat_info type="QKeySequence"></chat_info>
+				<chat_pgp type="QKeySequence"></chat_pgp>
+				<chat_ps type="QKeySequence"></chat_ps>
+				<chat_templates type="QKeySequence"></chat_templates>
+				<chat_voice type="QKeySequence"></chat_voice>
+				<gchat_clear type="QKeySequence"></gchat_clear>
+				<gchat_configure type="QKeySequence"></gchat_configure>
+				<gchat_find type="QKeySequence"></gchat_find>
+				<gchat_html_text type="QKeySequence"></gchat_html_text>
+				<gchat_icon type="QKeySequence"></gchat_icon>
+				<gchat_ps type="QKeySequence"></gchat_ps>
+				<gchat_templates type="QKeySequence"></gchat_templates>
 			</alist>
 			<chat comment="Shortcuts in the chat dialog">
 				<next-tab type="QVariantList" comment="Switch to the next tab">
--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -54,6 +54,7 @@
 #include <QFormLayout>
 #include <QClipboard>
 
+#include "psiactionlist.h"
 #include "psicon.h"
 #include "psiaccount.h"
 #include "capsmanager.h"
@@ -201,8 +202,14 @@ public:
 
 		trackBar = false;
 		mCmdManager.registerProvider(this);
+		actions = new ActionList("", 0, false);
 	}
 
+	~Private() {
+		delete actions;
+	}
+
+
 	GCMainDlg *dlg;
 	int state;
 	MUCManager *mucManager;
@@ -210,7 +217,8 @@ public:
 	QString password;
 	QString topic;
 	bool nonAnonymous;		 // got status code 100 ?
-	IconAction *act_find, *act_clear, *act_icon, *act_configure, *act_bookmark, *act_ps, *act_templates, *act_html_text;
+	ActionList *actions;
+	IconAction act_bookmark;
 	QAction *act_copy_muc_jid;
 	TypeAheadFindBar *typeahead;
 //#ifdef WHITEBOARDING
@@ -678,8 +686,9 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	ui_.lb_ident->setAccount(account());
 	ui_.lb_ident->setShowJid(false);
 	ui_.log->setSessionData(true, jid().full(), jid().full()); //FIXME change conference name
-	d->tabmode = PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool();
-	setWindowBorder(PsiOptions::instance()->getOption("options.ui.decorate-windows").toBool());
+	PsiOptions *options = PsiOptions::instance();
+	d->tabmode = options->getOption("options.ui.tabs.use-tabs").toBool();
+	setWindowBorder(options->getOption("options.ui.decorate-windows").toBool());
 	if (!d->tabmode && !isBorder()) {
 		d->winHeader_ = new PsiWindowHeader(this);
 		ui_.vboxLayout1->insertWidget(0, d->winHeader_);
@@ -716,7 +725,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 #ifndef HAVE_QT5
 	ui_.lv_users->model()->setSupportedDragActions(Qt::CopyAction);
 #endif
-	if ( PsiOptions::instance()->getOption("options.ui.contactlist.disable-scrollbar").toBool() ) {
+	if (options->getOption("options.ui.contactlist.disable-scrollbar").toBool() ) {
 		ui_.lv_users->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
 	}
 	connect(ui_.lv_users, SIGNAL(action(const QString &, const Status &, int)), SLOT(lv_action(const QString &, const Status &, int)));
@@ -728,28 +737,54 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	hb3a->addWidget( d->typeahead );
 	ui_.vboxLayout1->addLayout(hb3a);
 
-	d->act_clear = new IconAction (tr("Clear Chat Window"), "psi/clearChat", tr("Clear Chat Window"), 0, this);
-	connect( d->act_clear, SIGNAL(triggered()), SLOT(doClearButton()));
+	ActionList* actList = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Groupchat).at(0);
+	foreach (const QString &name, actList->actions()) {
+		IconAction *action = actList->action(name)->copy();
+		action->setParent(this);
+		d->actions->addAction(name, action);
 
-	d->act_find = new IconAction(tr("Find"), "psi/search", tr("&Find"), 0, this, "", true);
-	connect(d->act_find, SIGNAL(triggered()), d->typeahead, SLOT(toggleVisibility()));
-
-	d->act_configure = new IconAction(tr("Configure Room"), "psi/configure-room", tr("&Configure Room"), 0, this);
-	connect(d->act_configure, SIGNAL(triggered()), SLOT(configureRoom()));
+		if (name == "gchat_clear") {
+			connect(action, SIGNAL(triggered()), SLOT(doClearButton()));
+		}
+		else if (name == "gchat_find") {
+			// typeahead find
+			connect(action, SIGNAL(triggered()), d->typeahead, SLOT(toggleVisibility()));
+		// -- typeahead
+		}
+		else if (name == "gchat_configure") {
+			connect(action, SIGNAL(triggered()), SLOT(configureRoom()));
+		}
+		else if (name == "gchat_html_text") {
+			connect(action, SIGNAL(triggered()), d->mle(), SLOT(doHTMLTextMenu()));
+		}
+		else if (name == "gchat_icon") {
+			connect(account()->psi()->iconSelectPopup(), SIGNAL(textSelected(QString)), d, SLOT(addEmoticon(QString)));
+			action->setMenu(pa->psi()->iconSelectPopup());
+			ui_.tb_emoticons->setMenu(pa->psi()->iconSelectPopup());
+		}
+		else if (name == "gchat_info") {
+			connect(action, SIGNAL(triggered()), SLOT(doInfo()));
+		}
+		else if (name == "gchat_ps") {
+			connect(action, SIGNAL(triggered()), SLOT(doPasteAndSend()));
+		}
+		else if (name == "gchat_templates") {
+			action->setMenu(getTemplateMenu());
+		}
+	}
 
-	d->act_html_text = new IconAction(tr("Set Text Format"), "psi/text", tr("Set Text Format"), 0, this);
-	connect(d->act_html_text, SIGNAL(triggered()), d->mle(), SLOT(doHTMLTextMenu()));
+	actList = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Common).at(0);
+	foreach (const QString &name, actList->actions()) {
+		IconAction *action = actList->action(name)->copy();
+		action->setParent(this);
+		d->actions->addAction(name, action);
+	}
 
 //#ifdef WHITEBOARDING
 //	d->act_whiteboard = new IconAction(tr("Open a Whiteboard"), "psi/whiteboard", tr("Open a &Whiteboard"), 0, this);
 //	connect(d->act_whiteboard, SIGNAL(triggered()), SLOT(openWhiteboard()));
 //#endif
 
-	connect(pa->psi()->iconSelectPopup(), SIGNAL(textSelected(QString)), d, SLOT(addEmoticon(QString)));
-	d->act_icon = new IconAction( tr( "Select Icon" ), "psi/smile", tr( "Select Icon" ), 0, this );
-	d->act_icon->setMenu( pa->psi()->iconSelectPopup() );
-	ui_.tb_emoticons->setMenu(pa->psi()->iconSelectPopup());
-
 	d->act_nick = new QAction(this);
 	d->act_nick->setText(tr("Change Nickname..."));
 	connect(d->act_nick, SIGNAL(triggered()), d, SLOT(doNick()));
@@ -780,26 +815,12 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	connect(d->act_minimize, SIGNAL(triggered()), SLOT(doMinimize()));
 	addAction(d->act_minimize);
 
-	d->act_ps = new IconAction(tr("Paste and Send"), "psi/action_paste_and_send", tr("Paste and Send"), 0, this);
-	connect(d->act_ps, SIGNAL(triggered()), SLOT(doPasteAndSend()));
-
-	d->act_templates = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
-	d->act_templates->setMenu(getTemplateMenu());
 	int s = PsiIconset::instance()->system().iconSize();
 	ui_.toolbar->setIconSize(QSize(s,s));
-	ui_.toolbar->addAction(d->act_clear);
-	ui_.toolbar->addAction(d->act_find);
-	ui_.toolbar->addAction(d->act_configure);
-	ui_.toolbar->addAction(d->act_html_text);
+
 //#ifdef WHITEBOARDING
 //	ui_.toolbar->addAction(d->act_whiteboard);
 //#endif
-	ui_.toolbar->addWidget(new StretchWidget(ui_.toolbar));
-	ui_.toolbar->addAction(d->act_icon);
-	((QToolButton *)ui_.toolbar->widgetForAction(d->act_icon))->setPopupMode(QToolButton::InstantPopup);
-	ui_.toolbar->addAction(d->act_templates);
-	((QToolButton *)ui_.toolbar->widgetForAction(d->act_templates))->setPopupMode(QToolButton::InstantPopup);
-	ui_.toolbar->addAction(d->act_ps);
 	ui_.toolbar->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Maximum);
 
 	// Common actions
@@ -837,10 +858,10 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	connect(ui_.vsplitter, SIGNAL(splitterMoved(int,int)), this, SLOT(verticalSplitterMoved(int,int)));
 
 	// resize the horizontal splitter
-	d->logSize = PsiOptions::instance()->getOption("options.ui.muc.log-width").toInt();
-	d->rosterSize = PsiOptions::instance()->getOption("options.ui.muc.roster-width").toInt();
+	d->logSize = options->getOption("options.ui.muc.log-width").toInt();
+	d->rosterSize = options->getOption("options.ui.muc.roster-width").toInt();
 	QList<int> list;
-	bool leftRoster = PsiOptions::instance()->getOption("options.ui.muc.roster-at-left").toBool();
+	bool leftRoster = options->getOption("options.ui.muc.roster-at-left").toBool();
 	if(leftRoster)
 		list << d->rosterSize << d->logSize;
 	else
@@ -852,8 +873,8 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 		ui_.hsplitter->insertWidget(0, ui_.lv_users);  // Swap widgets
 
 	// resize the vertical splitter
-	d->logHeight = PsiOptions::instance()->getOption("options.ui.chat.log-height").toInt();
-	d->chateditHeight = PsiOptions::instance()->getOption("options.ui.chat.chatedit-height").toInt();
+	d->logHeight = options->getOption("options.ui.chat.log-height").toInt();
+	d->chateditHeight = options->getOption("options.ui.chat.chatedit-height").toInt();
 	setVSplitterPosition(d->logHeight, d->chateditHeight);
 
 	X11WM_CLASS("groupchat");
@@ -865,6 +886,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
 	connect(d->mucManager, SIGNAL(action_success(MUCManager::Action)), ui_.lv_users, SLOT(update()));
 
 	setLooks();
+	setToolbuttons();
 	setShortcuts();
 	invalidateTab();
 	setConnecting();
@@ -965,8 +987,9 @@ void GCMainDlg::ensureTabbedCorrectly()
 
 void GCMainDlg::setShortcuts()
 {
-	d->act_clear->setShortcuts(ShortcutManager::instance()->shortcuts("chat.clear"));
-	d->act_find->setShortcuts(ShortcutManager::instance()->shortcuts("chat.find"));
+
+	d->actions->action("gchat_clear")->setShortcuts(ShortcutManager::instance()->shortcuts("chat.clear"));
+	d->actions->action("gchat_find")->setShortcuts(ShortcutManager::instance()->shortcuts("chat.find"));
 	d->act_send->setShortcuts(ShortcutManager::instance()->shortcuts("chat.send"));
 	if (!isTabbed()) {
 		d->act_close->setShortcuts(ShortcutManager::instance()->shortcuts("common.close"));
@@ -1519,7 +1542,7 @@ void GCMainDlg::presence(const QString &nick, const Status &s)
 		if (d->configDlg) {
 			d->configDlg->setRoleAffiliation(s.mucItem().role(),s.mucItem().affiliation());
 		}
-		d->act_configure->setEnabled(s.mucItem().affiliation() >= MUCItem::Member);
+		d->actions->action("gchat_configure")->setEnabled(s.mucItem().affiliation() >= MUCItem::Member);
 	}
 
 	PsiOptions *options_ = PsiOptions::instance();
@@ -1964,7 +1987,7 @@ void GCMainDlg::setLooks()
 	f.fromString(PsiOptions::instance()->getOption("options.ui.look.font.contactlist").toString());
 	ui_.lv_users->setFont(f);
 
-	if (PsiOptions::instance()->getOption("options.ui.chat.central-toolbar").toBool()) {
+	if (PsiOptions::instance()->getOption("options.ui.contactlist.toolbars.m1.visible").toBool()) {
 		ui_.toolbar->show();
 		ui_.tb_actions->hide();
 		ui_.tb_emoticons->hide();
@@ -1992,6 +2015,28 @@ void GCMainDlg::setLooks()
 	ui_.lv_users->setLooks();
 }
 
+void GCMainDlg::setToolbuttons()
+{
+	ui_.toolbar->clear();
+	PsiOptions *options = PsiOptions::instance();
+	QStringList actionsNames = options->getOption("options.ui.contactlist.toolbars.m1.actions").toStringList();
+	foreach (const QString &actionName, actionsNames) {
+		// Hack. separator action can be added only once.
+		if (actionName == "separator") {
+			ui_.toolbar->addSeparator();
+			continue;
+		}
+
+		IconAction *action = d->actions->action(actionName);
+		if (action) {
+			action->addTo(ui_.toolbar);
+			if (actionName == "gchat_icon" || actionName == "gchat_templates") {
+				((QToolButton *)ui_.toolbar->widgetForAction(action))->setPopupMode(QToolButton::InstantPopup);
+			}
+		}
+	}
+}
+
 void GCMainDlg::optionsUpdate()
 {
 	/*QMimeSourceFactory *m = ui_.log->mimeSourceFactory();
@@ -1999,6 +2044,7 @@ void GCMainDlg::optionsUpdate()
 	delete m;*/
 
 	setLooks();
+	setToolbuttons();
 	setShortcuts();
 	d->typeahead->optionsUpdate();
 	// update status icons
@@ -2124,16 +2170,16 @@ void GCMainDlg::buildMenu()
 	// Dialog menu
 	d->pm_settings->clear();
 
-	d->act_clear->addTo( d->pm_settings );
-	d->act_configure->addTo( d->pm_settings );
+	d->actions->action("gchat_clear")->addTo( d->pm_settings );
+	d->actions->action("gchat_configure")->addTo( d->pm_settings );
 //#ifdef WHITEBOARDING
 //	d->act_whiteboard->addTo( d->pm_settings );
 //#endif
 	d->pm_settings->addSeparator();
 
-	d->pm_settings->addAction(d->act_icon);
-	d->pm_settings->addAction(d->act_templates);
-	d->pm_settings->addAction(d->act_ps);
+	d->pm_settings->addAction(d->actions->action("gchat_icon"));
+	d->pm_settings->addAction(d->actions->action("gchat_templates"));
+	d->pm_settings->addAction(d->actions->action("gchat_ps"));
 	d->pm_settings->addAction(d->act_nick);
 	d->pm_settings->addAction(d->act_bookmark);
 }
@@ -2189,14 +2235,14 @@ void GCMainDlg::doPasteAndSend()
 	if(TabbableWidget::isActiveTab()) {
 		d->mle()->paste();
 		mle_returnPressed();
-		d->act_ps->setEnabled(false);
+		d->actions->action("gchat_ps")->setEnabled(false);
 		QTimer::singleShot(2000, this, SLOT(psButtonEnabled()));
 	}
 }
 
 void GCMainDlg::psButtonEnabled()
 {
-	d->act_ps->setEnabled(true);
+	d->actions->action("gchat_ps")->setEnabled(true);
 }
 
 void GCMainDlg::sendTemp(const QString &templText)
--- a/src/groupchatdlg.h
+++ b/src/groupchatdlg.h
@@ -165,6 +165,7 @@ private:
 	void appendSysMsg(const MessageView &);
 	void appendMessage(const Message &, bool);
 	void setLooks();
+	void setToolbuttons();
 
 	void mucKickMsgHelper(const QString &nick, const Status &s, const QString &nickJid, const QString &title,
 			const QString &youSimple, const QString &youBy, const QString &someoneSimple,
--- a/src/mainwin.cpp
+++ b/src/mainwin.cpp
@@ -397,8 +397,8 @@ MainWin::MainWin(bool _onTop, bool _asTool, PsiCon* psi)
 	if (allInOne) {
 		QString toolOpt = "options.ui.contactlist.toolbars";
 		foreach(QString base, PsiOptions::instance()->getChildOptionNames(toolOpt, true, true)) {
-			// toolbar "Show contacts" is second, so check m1
-			if (base == toolOpt + ".m1") {
+			// toolbar "Show contacts" is fourth, so check m3
+			if (base == toolOpt + ".m3") {
 				d->viewToolBar = new PsiToolBar(base, rosterBar, d->psi->actionList());
 				d->viewToolBar->initialize();
 				connect(d->viewToolBar, SIGNAL(customize()), d->psi, SLOT(doToolbars()));
@@ -899,8 +899,14 @@ void MainWin::buildToolbars()
 	qDeleteAll(toolbars_);
 	toolbars_.clear();
 
-	bool allInOne = PsiOptions::instance()->getOption("options.ui.tabs.grouping").toString().contains('A');
-	foreach(QString base, PsiOptions::instance()->getChildOptionNames("options.ui.contactlist.toolbars", true, true)) {
+	PsiOptions *options = PsiOptions::instance();
+	bool allInOne = options->getOption("options.ui.tabs.grouping").toString().contains('A');
+	foreach(const QString &base, options->getChildOptionNames("options.ui.contactlist.toolbars", true, true)) {
+		QString toolbarName = options->getOption(base + ".name").toString();
+		if (toolbarName == "Chat" || toolbarName == "Groupchat") {
+			continue;
+		}
+
 		PsiToolBar* tb;
 		if (allInOne) {
 			if (d && d->viewToolBar && (d->viewToolBar->base() == base))
--- a/src/options/opt_lookfeel_toolbars.ui
+++ b/src/options/opt_lookfeel_toolbars.ui
@@ -1,45 +1,44 @@
-<ui version="4.0" >
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
  <class>LookFeelToolbars</class>
- <widget class="QWidget" name="LookFeelToolbars" >
-  <property name="geometry" >
+ <widget class="QWidget" name="LookFeelToolbars">
+  <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>315</width>
+    <width>346</width>
     <height>256</height>
    </rect>
   </property>
-  <property name="windowTitle" >
+  <property name="windowTitle">
    <string>LookFeelToolbarsUI</string>
   </property>
-  <layout class="QVBoxLayout" >
-   <property name="margin" >
-    <number>9</number>
-   </property>
-   <property name="spacing" >
+  <layout class="QVBoxLayout">
+   <property name="spacing">
     <number>6</number>
    </property>
+   <property name="margin">
+    <number>9</number>
+   </property>
    <item>
-    <layout class="QHBoxLayout" >
-     <property name="margin" >
-      <number>0</number>
-     </property>
-     <property name="spacing" >
+    <layout class="QHBoxLayout">
+     <property name="spacing">
       <number>6</number>
      </property>
+     <property name="margin">
+      <number>0</number>
+     </property>
      <item>
-      <widget class="QLabel" name="textLabel1" >
-       <property name="text" >
+      <widget class="QLabel" name="textLabel1">
+       <property name="text">
         <string>Toolbar:</string>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="QComboBox" name="cb_toolbars" >
-       <property name="sizePolicy" >
-        <sizepolicy>
-         <hsizetype>3</hsizetype>
-         <vsizetype>0</vsizetype>
+      <widget class="QComboBox" name="cb_toolbars">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="MinimumExpanding" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
@@ -48,13 +47,13 @@
      </item>
      <item>
       <spacer>
-       <property name="orientation" >
+       <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
-       <property name="sizeType" >
+       <property name="sizeType">
         <enum>QSizePolicy::Maximum</enum>
        </property>
-       <property name="sizeHint" >
+       <property name="sizeHint" stdset="0">
         <size>
          <width>30</width>
          <height>20</height>
@@ -63,21 +62,21 @@
       </spacer>
      </item>
      <item>
-      <widget class="IconButton" name="pb_addToolbar" >
-       <property name="text" >
+      <widget class="IconButton" name="pb_addToolbar">
+       <property name="text">
         <string>&amp;Add</string>
        </property>
-       <property name="shortcut" >
+       <property name="shortcut">
         <string>Alt+A</string>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="IconButton" name="pb_deleteToolbar" >
-       <property name="text" >
+      <widget class="IconButton" name="pb_deleteToolbar">
+       <property name="text">
         <string>&amp;Delete</string>
        </property>
-       <property name="shortcut" >
+       <property name="shortcut">
         <string>Alt+D</string>
        </property>
       </widget>
@@ -85,75 +84,77 @@
     </layout>
    </item>
    <item>
-    <widget class="Line" name="line2" >
-     <property name="frameShape" >
+    <widget class="Line" name="line2">
+     <property name="frameShape">
       <enum>QFrame::HLine</enum>
      </property>
-     <property name="frameShadow" >
+     <property name="frameShadow">
       <enum>QFrame::Sunken</enum>
      </property>
-     <property name="orientation" >
+     <property name="orientation">
       <enum>Qt::Horizontal</enum>
      </property>
     </widget>
    </item>
    <item>
-    <layout class="QHBoxLayout" >
-     <property name="margin" >
-      <number>0</number>
-     </property>
-     <property name="spacing" >
-      <number>6</number>
-     </property>
-     <item>
-      <widget class="QLabel" name="textLabel20" >
-       <property name="text" >
-        <string>Name:</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="le_toolbarName" />
-     </item>
-    </layout>
+    <widget class="QWidget" name="w_toolbarName" native="true">
+     <layout class="QHBoxLayout">
+      <property name="spacing">
+       <number>6</number>
+      </property>
+      <property name="margin">
+       <number>1</number>
+      </property>
+      <item>
+       <widget class="QLabel" name="textLabel20">
+        <property name="text">
+         <string>Name:</string>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <widget class="QLineEdit" name="le_toolbarName"/>
+      </item>
+     </layout>
+    </widget>
    </item>
    <item>
-    <layout class="QHBoxLayout" >
-     <property name="margin" >
-      <number>0</number>
-     </property>
-     <property name="spacing" >
+    <layout class="QHBoxLayout">
+     <property name="spacing">
       <number>6</number>
      </property>
+     <property name="margin">
+      <number>0</number>
+     </property>
      <item>
-      <widget class="QCheckBox" name="ck_toolbarOn" >
-       <property name="whatsThis" >
+      <widget class="QCheckBox" name="ck_toolbarOn">
+       <property name="whatsThis">
         <string>Specifies, whether toolbar is enabled and visible.</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>Enabled</string>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="QCheckBox" name="ck_toolbarLocked" >
-       <property name="whatsThis" >
+      <widget class="QCheckBox" name="ck_toolbarLocked">
+       <property name="whatsThis">
         <string/>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>Locked</string>
        </property>
       </widget>
      </item>
      <item>
       <spacer>
-       <property name="orientation" >
+       <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
-       <property name="sizeType" >
+       <property name="sizeType">
         <enum>QSizePolicy::Expanding</enum>
        </property>
-       <property name="sizeHint" >
+       <property name="sizeHint" stdset="0">
         <size>
          <width>40</width>
          <height>20</height>
@@ -164,35 +165,35 @@
     </layout>
    </item>
    <item>
-    <widget class="Line" name="line3" >
-     <property name="frameShape" >
+    <widget class="Line" name="line3">
+     <property name="frameShape">
       <enum>QFrame::HLine</enum>
      </property>
-     <property name="frameShadow" >
+     <property name="frameShadow">
       <enum>QFrame::Sunken</enum>
      </property>
-     <property name="orientation" >
+     <property name="orientation">
       <enum>Qt::Horizontal</enum>
      </property>
     </widget>
    </item>
    <item>
-    <layout class="QGridLayout" >
-     <property name="margin" >
+    <layout class="QGridLayout">
+     <property name="margin">
       <number>0</number>
      </property>
-     <property name="spacing" >
+     <property name="spacing">
       <number>6</number>
      </property>
-     <item row="3" column="3" >
+     <item row="3" column="3">
       <spacer>
-       <property name="orientation" >
+       <property name="orientation">
         <enum>Qt::Vertical</enum>
        </property>
-       <property name="sizeType" >
+       <property name="sizeType">
         <enum>QSizePolicy::Expanding</enum>
        </property>
-       <property name="sizeHint" >
+       <property name="sizeHint" stdset="0">
         <size>
          <width>25</width>
          <height>101</height>
@@ -200,79 +201,73 @@
        </property>
       </spacer>
      </item>
-     <item row="1" column="3" >
-      <widget class="IconToolButton" name="tb_up" >
-       <property name="sizePolicy" >
-        <sizepolicy>
-         <hsizetype>0</hsizetype>
-         <vsizetype>0</vsizetype>
+     <item row="1" column="3">
+      <widget class="IconToolButton" name="tb_up">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>...</string>
        </property>
-       <property name="psiIconName" stdset="0" >
+       <property name="psiIconName" stdset="0">
         <string>psi/arrowUp</string>
        </property>
       </widget>
      </item>
-     <item rowspan="3" row="1" column="2" >
-      <widget class="QListWidget" name="lw_selectedActions" >
-       <property name="editTriggers" >
+     <item row="1" column="2" rowspan="3">
+      <widget class="QListWidget" name="lw_selectedActions">
+       <property name="editTriggers">
         <set>QAbstractItemView::NoEditTriggers</set>
        </property>
-       <property name="sortingEnabled" >
+       <property name="sortingEnabled">
         <bool>false</bool>
        </property>
       </widget>
      </item>
-     <item row="2" column="3" >
-      <widget class="IconToolButton" name="tb_down" >
-       <property name="sizePolicy" >
-        <sizepolicy>
-         <hsizetype>0</hsizetype>
-         <vsizetype>0</vsizetype>
+     <item row="2" column="3">
+      <widget class="IconToolButton" name="tb_down">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>...</string>
        </property>
-       <property name="psiIconName" stdset="0" >
+       <property name="psiIconName" stdset="0">
         <string>psi/arrowDown</string>
        </property>
       </widget>
      </item>
-     <item row="1" column="1" >
-      <widget class="IconToolButton" name="tb_right" >
-       <property name="sizePolicy" >
-        <sizepolicy>
-         <hsizetype>0</hsizetype>
-         <vsizetype>0</vsizetype>
+     <item row="1" column="1">
+      <widget class="IconToolButton" name="tb_right">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>...</string>
        </property>
-       <property name="psiIconName" stdset="0" >
+       <property name="psiIconName" stdset="0">
         <string>psi/arrowRight</string>
        </property>
       </widget>
      </item>
-     <item row="3" column="1" >
+     <item row="3" column="1">
       <spacer>
-       <property name="orientation" >
+       <property name="orientation">
         <enum>Qt::Vertical</enum>
        </property>
-       <property name="sizeType" >
+       <property name="sizeType">
         <enum>QSizePolicy::Expanding</enum>
        </property>
-       <property name="sizeHint" >
+       <property name="sizeHint" stdset="0">
         <size>
          <width>25</width>
          <height>91</height>
@@ -280,61 +275,59 @@
        </property>
       </spacer>
      </item>
-     <item row="0" column="0" >
-      <widget class="QLabel" name="textLabel25" >
-       <property name="text" >
+     <item row="0" column="0">
+      <widget class="QLabel" name="textLabel25">
+       <property name="text">
         <string>A&amp;vailable actions:</string>
        </property>
-       <property name="buddy" >
+       <property name="buddy">
         <cstring>tw_availActions</cstring>
        </property>
       </widget>
      </item>
-     <item row="2" column="1" >
-      <widget class="IconToolButton" name="tb_left" >
-       <property name="sizePolicy" >
-        <sizepolicy>
-         <hsizetype>0</hsizetype>
-         <vsizetype>0</vsizetype>
+     <item row="2" column="1">
+      <widget class="IconToolButton" name="tb_left">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>...</string>
        </property>
-       <property name="psiIconName" stdset="0" >
+       <property name="psiIconName" stdset="0">
         <string>psi/arrowLeft</string>
        </property>
       </widget>
      </item>
-     <item rowspan="3" row="1" column="0" >
-      <widget class="QTreeWidget" name="tw_availActions" >
-       <property name="editTriggers" >
+     <item row="1" column="0" rowspan="3">
+      <widget class="QTreeWidget" name="tw_availActions">
+       <property name="editTriggers">
         <set>QAbstractItemView::NoEditTriggers</set>
        </property>
-       <property name="rootIsDecorated" >
+       <property name="rootIsDecorated">
         <bool>false</bool>
        </property>
-       <property name="sortingEnabled" >
+       <property name="sortingEnabled">
         <bool>false</bool>
        </property>
-       <property name="columnCount" >
+       <property name="columnCount">
         <number>1</number>
        </property>
        <column>
-        <property name="text" >
+        <property name="text">
          <string/>
         </property>
        </column>
       </widget>
      </item>
-     <item row="0" column="2" >
-      <widget class="QLabel" name="textLabel24" >
-       <property name="text" >
+     <item row="0" column="2">
+      <widget class="QLabel" name="textLabel24">
+       <property name="text">
         <string>Curr&amp;ent actions:</string>
        </property>
-       <property name="buddy" >
+       <property name="buddy">
         <cstring>lw_selectedActions</cstring>
        </property>
       </widget>
@@ -343,7 +336,7 @@
    </item>
   </layout>
  </widget>
- <layoutdefault spacing="6" margin="11" />
+ <layoutdefault spacing="6" margin="11"/>
  <customwidgets>
   <customwidget>
    <class>IconToolButton</class>
--- a/src/options/opt_toolbars.cpp
+++ b/src/options/opt_toolbars.cpp
@@ -23,6 +23,10 @@
 #include <QList>
 #include <QVBoxLayout>
 
+#define CHAT_TOOLBAR       0
+#define GROUPCHAT_TOOLBAR  1
+#define ROSTER_TOOLBAR     2
+
 class LookFeelToolbarsUI : public QWidget, public Ui::LookFeelToolbars
 {
 public:
@@ -39,12 +43,41 @@ class OptionsTabToolbars::Private
 {
 public:
 	QList<ToolbarPrefs> toolbars;
+	class OptionsTabToolbars *q;
 
 	PsiActionList::ActionsType class2id() {
 		int ret = (int)PsiActionList::Actions_Common;
 		ret |= (int)PsiActionList::Actions_MainWin;
 		return (PsiActionList::ActionsType)ret;
 	}
+
+	PsiActionList::ActionsType class2idChat() {
+		int ret = (int)PsiActionList::Actions_Common;
+		ret |= (int)PsiActionList::Actions_Chat;
+		return (PsiActionList::ActionsType)ret;
+	}
+
+	PsiActionList::ActionsType class2idGroupchat() {
+		int ret = (int)PsiActionList::Actions_Common;
+		ret |= (int)PsiActionList::Actions_Groupchat;
+		return (PsiActionList::ActionsType)ret;
+	}
+
+	PsiActionList::ActionsType currentType() {
+		PsiActionList::ActionsType type;
+		LookFeelToolbarsUI *d = (LookFeelToolbarsUI*) q->w;
+
+		if (d->cb_toolbars->currentIndex() == CHAT_TOOLBAR) {
+			type = class2idChat();
+		}
+		else if (d->cb_toolbars->currentIndex() == GROUPCHAT_TOOLBAR) {
+			type = class2idGroupchat();
+		}
+		else {
+			type = class2id();
+		}
+		return type;
+	}
 };
 
 OptionsTabToolbars::OptionsTabToolbars(QObject *parent)
@@ -52,6 +85,7 @@ OptionsTabToolbars::OptionsTabToolbars(QObject *parent)
 {
 	w = 0;
 	p = new Private();
+	p->q = this;
 
 	noDirty = false;
 }
@@ -185,7 +219,11 @@ void OptionsTabToolbars::restoreOptions()
 
 	PsiOptions *o = PsiOptions::instance();
 
-	QStringList toolbarBases = o->getChildOptionNames("options.ui.contactlist.toolbars", true, true);
+	QStringList toolbarBases;
+	toolbarBases = o->getChildOptionNames("options.ui.contactlist.toolbars", true, true);
+
+	QString chatToolbarName = tr("Chat");
+	QString groupchatToolbarName = tr("Groupchat");
 
 	foreach(QString base, toolbarBases) {
 		ToolbarPrefs tb;
@@ -201,15 +239,19 @@ void OptionsTabToolbars::restoreOptions()
 		tb.keys = o->getOption(base + ".actions").toStringList();
 
 		p->toolbars << tb;
-		d->cb_toolbars->addItem(tb.name);
+		if (tb.name == "Chat") {
+			d->cb_toolbars->addItem(chatToolbarName);
+		}
+		else if (tb.name == "Groupchat") {
+			d->cb_toolbars->addItem(groupchatToolbarName);
+		}
+		else {
+			d->cb_toolbars->addItem(tb.name);
+		}
 	}
 
-	if (d->cb_toolbars->count() > 0) {
-		d->cb_toolbars->setCurrentIndex(0);
-		toolbarSelectionChanged(0);
-	}
-	else
-		toolbarSelectionChanged(-1);
+	d->cb_toolbars->setCurrentIndex(0);
+	toolbarSelectionChanged(0);
 }
 
 //----------------------------------------------------------------------------
@@ -311,7 +353,8 @@ void OptionsTabToolbars::toolbarSelectionChanged(int item)
 	d->le_toolbarName->setEnabled(enable);
 	// d->pb_toolbarPosition->setEnabled(enable && moveable);
 	d->ck_toolbarOn->setEnabled(enable);
-	d->ck_toolbarLocked->setEnabled(enable && moveable);
+	d->ck_toolbarLocked->setEnabled(enable);
+	d->ck_toolbarLocked->setVisible(item >= ROSTER_TOOLBAR || item < CHAT_TOOLBAR);
 	// d->ck_toolbarStretch->setEnabled(enable && moveable);
 	d->lw_selectedActions->setEnabled(enable && customizeable);
 	d->tw_availActions->setEnabled(enable && customizeable);
@@ -319,8 +362,9 @@ void OptionsTabToolbars::toolbarSelectionChanged(int item)
 	d->tb_down->setEnabled(enable && customizeable);
 	d->tb_left->setEnabled(enable && customizeable);
 	d->tb_right->setEnabled(enable && customizeable);
-	d->pb_deleteToolbar->setEnabled(enable);
+	d->pb_deleteToolbar->setEnabled((item >= CHAT_TOOLBAR && item < ROSTER_TOOLBAR) ? false : enable);
 	d->cb_toolbars->setEnabled(enable);
+	d->w_toolbarName->setVisible(item >= ROSTER_TOOLBAR || item < CHAT_TOOLBAR);
 
 	d->tw_availActions->clear();
 	d->lw_selectedActions->clear();
@@ -335,9 +379,11 @@ void OptionsTabToolbars::toolbarSelectionChanged(int item)
 	ToolbarPrefs tb;
 	tb = p->toolbars[n];
 
-	d->le_toolbarName->setText(tb.name);
+	if (item > 1) {
+		d->le_toolbarName->setText(tb.name);
+		d->ck_toolbarLocked->setChecked(tb.locked || !moveable);
+	}
 	d->ck_toolbarOn->setChecked(tb.on);
-	d->ck_toolbarLocked->setChecked(tb.locked || !moveable);
 	// d->ck_toolbarStretch->setChecked(tb.stretchable);
 
 	{
@@ -345,7 +391,9 @@ void OptionsTabToolbars::toolbarSelectionChanged(int item)
 		QTreeWidget *tw = d->tw_availActions;
 		QTreeWidgetItem *lastRoot = 0;
 
-		foreach(ActionList* actionList, psi->actionList()->actionLists(p->class2id())) {
+		QList<ActionList*> lists = psi->actionList()->actionLists(p->currentType());
+
+		foreach(ActionList* actionList, lists) {
 			QTreeWidgetItem *root = new QTreeWidgetItem(tw, lastRoot);
 			lastRoot = root;
 			root->setText(0, actionList->name());
@@ -376,7 +424,7 @@ void OptionsTabToolbars::toolbarSelectionChanged(int item)
 
 	QStringList::Iterator it = tb.keys.begin();
 	for (; it != tb.keys.end(); ++it) {
-		addToolbarAction(d->lw_selectedActions, *it, p->class2id());
+		addToolbarAction(d->lw_selectedActions, *it, p->currentType());
 	}
 	updateArrows();
 
@@ -506,7 +554,7 @@ void OptionsTabToolbars::toolbarAddAction()
 	if (!item || item->data(0, Qt::UserRole).toString().isEmpty())
 		return;
 
-	addToolbarAction(d->lw_selectedActions, item->data(0, Qt::UserRole).toString(), p->class2id());
+	addToolbarAction(d->lw_selectedActions, item->data(0, Qt::UserRole).toString(), p->currentType());
 	rebuildToolbarKeys();
 	updateArrows();
 }
@@ -537,9 +585,11 @@ void OptionsTabToolbars::toolbarDataChanged()
 	ToolbarPrefs tb = p->toolbars[n];
 
 	tb.dirty = true;
-	tb.name = d->le_toolbarName->text();
+	if (n > 1) {
+		tb.name = d->le_toolbarName->text();
+		tb.locked = d->ck_toolbarLocked->isChecked();
+	}
 	tb.on = d->ck_toolbarOn->isChecked();
-	tb.locked = d->ck_toolbarLocked->isChecked();
 	// tb.stretchable = d->ck_toolbarStretch->isChecked();
 
 	p->toolbars[n] = tb;
--- a/src/psi_profiles.cpp
+++ b/src/psi_profiles.cpp
@@ -1358,6 +1358,62 @@ bool OptionsMigration::fromFile(const QString &fname)
 
 void OptionsMigration::lateMigration()
 {
+	// Add default chat and groupchat toolbars
+	if (PsiOptions::instance()->getOption("options.ui.contactlist.toolbars.m0.name").toString() != "Chat") {
+		QStringList pluginsKeys;
+		ToolbarPrefs chatToolbar;
+		chatToolbar.on = PsiOptions::instance()->getOption("options.ui.chat.central-toolbar").toBool();
+		PsiOptions::instance()->removeOption("options.ui.chat.central-toolbar");
+		chatToolbar.name = "Chat";
+		chatToolbar.keys << "chat_clear"  << "chat_find" << "chat_html_text" << "chat_add_contact";
+		chatToolbar.keys += pluginsKeys;
+		chatToolbar.keys << "spacer" << "chat_icon" << "chat_templates" << "chat_ps" << "chat_file"
+						 << "chat_pgp" << "chat_info" << "chat_history" << "chat_voice"
+						 << "chat_active_contacts";
+
+		if (PsiOptions::instance()->getOption("options.ui.chat.disable-paste-send").toBool()) {
+			chatToolbar.keys.removeAt(chatToolbar.keys.indexOf("chat_ps"));
+		}
+
+		ToolbarPrefs groupchatToolbar;
+		groupchatToolbar.on = chatToolbar.on;
+
+		groupchatToolbar.name = "Groupchat";
+		groupchatToolbar.keys << "gchat_clear"  << "gchat_find" << "gchat_html_text" << "gchat_configure";
+		groupchatToolbar.keys += pluginsKeys;
+		groupchatToolbar.keys << "spacer" << "gchat_icon" << "gchat_templates" << "gchat_ps" ;
+
+		if (PsiOptions::instance()->getOption("options.ui.chat.disable-paste-send").toBool()) {
+			groupchatToolbar.keys.removeAt(groupchatToolbar.keys.indexOf("gchat_ps"));
+		}
+		PsiOptions::instance()->removeOption("options.ui.chat.disable-paste-send");
+
+		QList<ToolbarPrefs> toolbars;
+		toolbars << chatToolbar
+		         << groupchatToolbar;
+
+		QStringList toolbarBases = PsiOptions::instance()->getChildOptionNames("options.ui.contactlist.toolbars", true, true);
+		foreach(QString base, toolbarBases) {
+			ToolbarPrefs tb;
+			tb.id = PsiOptions::instance()->getOption(base + ".key").toString();
+			tb.name = PsiOptions::instance()->getOption(base + ".name").toString();
+			tb.on = PsiOptions::instance()->getOption(base + ".visible").toBool();
+			tb.locked = PsiOptions::instance()->getOption(base + ".locked").toBool();
+			tb.dock = (Qt3Dock)PsiOptions::instance()->getOption(base + ".dock.position").toInt(); //FIXME
+			tb.nl = PsiOptions::instance()->getOption(base + ".dock.nl").toBool();
+			tb.keys = PsiOptions::instance()->getOption(base + ".actions").toStringList();
+
+			toolbars << tb;
+		}
+
+		PsiOptions::instance()->removeOption("options.ui.contactlist.toolbars", true);
+
+		foreach(ToolbarPrefs tb, toolbars) {
+			tb.locked = true;
+			PsiToolBar::structToOptions(PsiOptions::instance(), tb);
+		}
+	}
+
 	foreach(QString opt, PsiOptions::instance()->allOptionNames()) {
 		if (opt.startsWith("options.status.presets.") ||
 			opt.startsWith("options.iconsets.service-status.") ||
--- a/src/psiactionlist.cpp
+++ b/src/psiactionlist.cpp
@@ -59,6 +59,8 @@ private:
 	void createChat();
 	void createGroupchat();
 
+	void addPluginsActions(ActionsType type);
+
 	struct ActionNames {
 		const char *name;
 		IconAction *action;
@@ -443,10 +445,76 @@ void PsiActionList::Private::createMessage()
 
 void PsiActionList::Private::createChat()
 {
+	{
+		IconAction *actClear = new IconAction(tr("Clear Chat Window"), "psi/clearChat", tr("Clear Chat Window"), 0, this);
+		IconAction *actFind = new IconAction(tr("Find"), "psi/search", tr("&Find"), 0, this, "", true);
+		IconAction *actHtmlText = new IconAction(tr("Set Text Format"), "psi/text", tr("Set Text Format"), 0, this);
+		IconAction *actAddContact = new IconAction(tr("Add Contact To Roster"), "psi/addContact", tr("Add Contact"), 0, this);
+		IconAction *actIcon = new IconAction(tr("Select Icon"), "psi/smile", tr("Select Icon"), 0, this);
+		IconAction *actVoice = new IconAction(tr("Voice Call"), "psi/avcall", tr("Voice Call"), 0, this);
+		IconAction *actFile = new IconAction(tr("Send File"), "psi/upload", tr("Send File"), 0, this);
+		IconAction *actPgp = new IconAction(tr("Toggle Encryption"), "psi/cryptoYes", tr("Toggle Encryption"), 0, this, 0, true);
+		IconAction *actInfo = new IconAction(tr("User Info"), "psi/vCard", tr("User Info"), 0, this);
+		IconAction *actHistory = new IconAction(tr("Message History"), "psi/history", tr("Message History"), 0, this);
+		IconAction *actCompact = new IconAction(tr("Toggle Compact/Full Size"), "psi/compact", tr("Toggle Compact/Full Size"), 0, this);
+		IconAction *actPs = new IconAction(tr("Paste and Send"), "psi/action_paste_and_send", tr("Paste and Send"), 0, this);
+		IconAction *actTemplates = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
+		IconAction *actActiveContacts = new IconAction (tr("Active contacts"), "psi/jabber", tr("Active contacts"), 0, this);
+
+		ActionNames actions[] = {
+			{ "chat_clear",  actClear  },
+			{ "chat_find", actFind   },
+			{ "chat_html_text", actHtmlText   },
+			{ "chat_add_contact", actAddContact   },
+			{ "chat_icon", actIcon   },
+			{ "chat_voice", actVoice   },
+			{ "chat_file", actFile   },
+			{ "chat_pgp", actPgp   },
+			{ "chat_info", actInfo   },
+			{ "chat_history", actHistory   },
+			{ "chat_compact", actCompact   },
+			{ "chat_ps", actPs   },
+			{ "chat_templates", actTemplates   },
+			{ "chat_active_contacts", actActiveContacts   },
+			{ "", 0 }
+		};
+
+		createActionList(tr("Chat basic buttons"), Actions_Chat, actions);
+	}
+
+	addPluginsActions(Actions_Chat);
 }
 
 void PsiActionList::Private::createGroupchat()
 {
+	{
+		IconAction *actClear = new IconAction(tr("Clear Chat Window"), "psi/clearChat", tr("Clear Chat Window"), 0, this);
+		IconAction *actFind = new IconAction(tr("Find"), "psi/search", tr("&Find"), 0, this, "", true);
+		IconAction *actHtmlText = new IconAction(tr("Set Text Format"), "psi/text", tr("Set Text Format"), 0, this);
+		IconAction *actConfigure = new IconAction(tr("Configure Room"), "psi/configure-room", tr("Configure Room"), 0, this);
+		IconAction *actIcon = new IconAction(tr("Select Icon"), "psi/smile", tr("Select Icon"), 0, this);
+		IconAction *actPs = new IconAction(tr("Paste and Send"), "psi/action_paste_and_send", tr("Paste and Send"), 0, this);
+		IconAction *actTemplates = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
+
+		ActionNames actions[] = {
+			{ "gchat_clear",  actClear  },
+			{ "gchat_find", actFind   },
+			{ "gchat_html_text", actHtmlText   },
+			{ "gchat_configure", actConfigure   },
+			{ "gchat_icon", actIcon   },
+			{ "gchat_ps", actPs   },
+			{ "gchat_templates", actTemplates   },
+			{ "", 0 }
+		};
+
+		createActionList(tr("Groupchat basic buttons"), Actions_Groupchat, actions);
+	}
+
+	addPluginsActions(Actions_Groupchat);
+}
+
+void PsiActionList::Private::addPluginsActions(ActionsType type)
+{
 }
 
 void PsiActionList::Private::optionsChanged()
--- a/src/psiactionlist.h
+++ b/src/psiactionlist.h
@@ -35,8 +35,8 @@ public:
 		Actions_Common    = (1 << 0),
 		Actions_MainWin   = (1 << 1),
 		// Actions_Message   = (1 << 2),
-		// Actions_Chat      = (1 << 3),
-		// Actions_Groupchat = (1 << 4)
+		Actions_Chat      = (1 << 3),
+		Actions_Groupchat = (1 << 4)
 	};
 
 public:
--- a/src/psichatdlg.cpp
+++ b/src/psichatdlg.cpp
@@ -48,7 +48,8 @@
 #include "xmpp_tasks.h"
 #include "lastactivitytask.h"
 #include "avcall/avcall.h"
-
+#include "actionlist.h"
+#include "psiactionlist.h"
 
 #define MCMDCHAT		"http://psi-im.org/ids/mcmd#chatmain"
 
@@ -171,7 +172,8 @@ private:
 
 
 PsiChatDlg::PsiChatDlg(const Jid& jid, PsiAccount* pa, TabManager* tabManager)
-	: ChatDlg(jid, pa, tabManager), mCmdManager_(&mCmdSite_), tabCompletion(&mCmdManager_), autoPGP_(true)
+	: ChatDlg(jid, pa, tabManager), actions_(new ActionList("", 0, false)), mCmdManager_(&mCmdSite_), tabCompletion(&mCmdManager_)
+	, autoPGP_(true)
 {
 	connect(account()->psi(), SIGNAL(accountCountChanged()), this, SLOT(updateIdentityVisibility()));
 	connect(account(), SIGNAL(addedContact(PsiContact*)), SLOT(updateContactAdding(PsiContact*)));
@@ -196,6 +198,7 @@ PsiChatDlg::~PsiChatDlg()
 		disconnect(menu, SIGNAL(doEditTemplates()), this, SLOT(editTemplates()));
 		disconnect(menu, SIGNAL(doTemplateText(const QString &)), this, SLOT(sendTemp(const QString &)));
 	}
+	delete actions_;
 }
 
 void PsiChatDlg::initUi()
@@ -355,7 +358,7 @@ void PsiChatDlg::setLooks()
 		ui_.lb_client->show();
 		ui_.lb_status->show();
 		ui_.le_jid->show();
-		if (PsiOptions::instance()->getOption("options.ui.chat.central-toolbar").toBool()) {
+		if (PsiOptions::instance()->getOption("options.ui.contactlist.toolbars.m0.visible").toBool()) {
 			ui_.toolbar->show();
 			ui_.tb_actions->hide();
 			ui_.tb_emoticons->hide();
@@ -372,25 +375,26 @@ void PsiChatDlg::setLooks()
 	updateIdentityVisibility();
 	updateCountVisibility();
 	updateContactAdding();
+	updateToolbuttons();
 
 	// toolbuttons
 	QIcon i;
 	i.addPixmap(IconsetFactory::icon("psi/cryptoNo").impix(),  QIcon::Normal, QIcon::Off);
 	i.addPixmap(IconsetFactory::icon("psi/cryptoYes").impix(), QIcon::Normal, QIcon::On);
-	act_pgp_->setPsiIcon(0);
-	act_pgp_->setIcon(i);
+	actions_->action("chat_pgp")->setPsiIcon(0);
+	actions_->action("chat_pgp")->setIcon(i);
 }
 
 void PsiChatDlg::setShortcuts()
 {
 	ChatDlg::setShortcuts();
 
-	act_clear_->setShortcuts(ShortcutManager::instance()->shortcuts("chat.clear"));
+	actions_->action("chat_clear")->setShortcuts(ShortcutManager::instance()->shortcuts("chat.clear"));
 // typeahead find bar
-	act_find->setShortcuts(ShortcutManager::instance()->shortcuts("chat.find"));
+	actions_->action("chat_find")->setShortcuts(ShortcutManager::instance()->shortcuts("chat.find"));
 // -- typeahead
-	act_info_->setShortcuts(ShortcutManager::instance()->shortcuts("common.user-info"));
-	act_history_->setShortcuts(ShortcutManager::instance()->shortcuts("common.history"));
+	actions_->action("chat_info")->setShortcuts(ShortcutManager::instance()->shortcuts("common.user-info"));
+	actions_->action("chat_history")->setShortcuts(ShortcutManager::instance()->shortcuts("common.history"));
 
 	act_mini_cmd_->setShortcuts(ShortcutManager::instance()->shortcuts("chat.quick-command"));
 
@@ -425,11 +429,41 @@ void PsiChatDlg::updateContactAdding(PsiContact* c)
 		Jid rj = realJid();
 		UserListItem *uli;
 		if (rj.isNull() || ((uli = account()->findFirstRelevant(rj)) && (uli->inList() || uli->isSelf()))) {
-			act_add_contact->setVisible(false);
+			actions_->action("chat_add_contact")->setVisible(false);
 		} else {
-			act_add_contact->setVisible(true);
+			actions_->action("chat_add_contact")->setVisible(true);
+		}
+	}
+}
+
+void PsiChatDlg::updateToolbuttons()
+{
+	ui_.toolbar->clear();
+	PsiOptions *options = PsiOptions::instance();
+	QStringList actionsNames = options->getOption("options.ui.contactlist.toolbars.m0.actions").toStringList();
+	foreach (const QString &actionName, actionsNames) {
+		if (actionName == "chat_voice" && !AvCallManager::isSupported()) {
+			continue;
+		}
+		if (actionName == "chat_pgp" && !options->getOption("options.pgp.enable").toBool()) {
+			continue;
+		}
+
+		// Hack. separator action can be added only once.
+		if (actionName == "separator") {
+			ui_.toolbar->addSeparator();
+			continue;
+		}
+
+		IconAction *action = actions_->action(actionName);
+		if (action) {
+			action->addTo(ui_.toolbar);
+			if (actionName == "chat_icon" || actionName == "chat_templates") {
+				((QToolButton *)ui_.toolbar->widgetForAction(action))->setPopupMode(QToolButton::InstantPopup);
+			}
 		}
 	}
+
 }
 
 void PsiChatDlg::copyUserJid()
@@ -453,54 +487,69 @@ void PsiChatDlg::initToolButtons()
 	ui_.vboxLayout1->addLayout(hb3a);
 // -- typeahead
 
-	act_clear_ = new IconAction(tr("Clear Chat Window"), "psi/clearChat", tr("Clear Chat Window"), 0, this);
-	connect(act_clear_, SIGNAL(triggered()), SLOT(doClearButton()));
-
-// typeahead find
-	act_find = new IconAction(tr("Find"), "psi/search", tr("&Find"), 0, this, "", true);
-	connect(act_find, SIGNAL(triggered()), typeahead, SLOT(toggleVisibility()));
-// -- typeahead
-
-	act_html_text = new IconAction(tr("Set Text Format"), "psi/text", tr("Set Text Format"), 0, this);
-	connect(act_html_text, SIGNAL(triggered()), chatEdit(), SLOT(doHTMLTextMenu()));
-
-	act_add_contact = new IconAction(tr("Add Contact To Roster"), "psi/addContact", tr("Add Contact"), 0, this);
-	connect(act_add_contact, SIGNAL(triggered()), SLOT(addContact()));
-
-	connect(account()->psi()->iconSelectPopup(), SIGNAL(textSelected(QString)), this, SLOT(addEmoticon(QString)));
-	act_icon_ = new IconAction(tr("Select Icon"), "psi/smile", tr("Select Icon"), 0, this);
-	act_icon_->setMenu(account()->psi()->iconSelectPopup());
-	ui_.tb_emoticons->setMenu(account()->psi()->iconSelectPopup());
-
-	act_voice_ = new IconAction(tr("Voice Call"), "psi/avcall", tr("Voice Call"), 0, this);
-	connect(act_voice_, SIGNAL(triggered()), SLOT(doVoice()));
-	//act_voice_->setEnabled(false);
-	ui_.tb_voice->setDefaultAction(act_voice_);
-
-	act_file_ = new IconAction(tr("Send File"), "psi/upload", tr("Send File"), 0, this);
-	connect(act_file_, SIGNAL(triggered()), SLOT(doFile()));
-
-	act_pgp_ = new IconAction(tr("Toggle Encryption"), "", tr("Toggle Encryption"), 0, this, 0, true);
-	ui_.tb_pgp->setDefaultAction(act_pgp_);
-	connect(act_pgp_, SIGNAL(triggered(bool)), SLOT(actPgpToggled(bool)));
-
-	act_info_ = new IconAction(tr("User Info"), "psi/vCard", tr("User Info"), 0, this);
-	connect(act_info_, SIGNAL(triggered()), SLOT(doInfo()));
-
-	act_history_ = new IconAction(tr("Message History"), "psi/history", tr("Message History"), 0, this);
-	connect(act_history_, SIGNAL(triggered()), SLOT(doHistory()));
+	ActionList* list = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Chat).at(0);
+	foreach (const QString &name, list->actions()) {
+		IconAction *action = list->action(name)->copy();
+		action->setParent(this);
+		actions_->addAction(name, action);
 
-	act_compact_ = new IconAction(tr("Toggle Compact/Full Size"), "psi/compact", tr("Toggle Compact/Full Size"), 0, this);
-	connect(act_compact_, SIGNAL(triggered()), SLOT(toggleSmallChat()));
-
-	act_ps_ = new IconAction(tr("Paste and Send"), "psi/action_paste_and_send", tr("Paste and Send"), 0, this);
-	connect(act_ps_, SIGNAL(triggered()), SLOT(doPasteAndSend()));
-
-	act_templates_ = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
-	act_templates_->setMenu(getTemplateMenu());
+		if (name == "chat_clear") {
+			connect(action, SIGNAL(triggered()), SLOT(doClearButton()));
+		}
+		else if (name == "chat_find") {
+			// typeahead find
+			connect(action, SIGNAL(triggered()), typeahead, SLOT(toggleVisibility()));
+		// -- typeahead
+		}
+		else if (name == "chat_html_text") {
+			connect(action, SIGNAL(triggered()), chatEdit(), SLOT(doHTMLTextMenu()));
+		}
+		else if (name == "chat_add_contact") {
+			connect(action, SIGNAL(triggered()), SLOT(addContact()));
+		}
+		else if (name == "chat_icon") {
+			connect(account()->psi()->iconSelectPopup(), SIGNAL(textSelected(QString)), this, SLOT(addEmoticon(QString)));
+			action->setMenu(account()->psi()->iconSelectPopup());
+			ui_.tb_emoticons->setMenu(account()->psi()->iconSelectPopup());
+		}
+		else if (name == "chat_voice") {
+			connect(action, SIGNAL(triggered()), SLOT(doVoice()));
+			//act_voice_->setEnabled(false);
+			ui_.tb_voice->setDefaultAction(actions_->action("chat_voice"));
+		}
+		else if (name == "chat_file") {
+			connect(action, SIGNAL(triggered()), SLOT(doFile()));
+		}
+		else if (name == "chat_pgp") {
+			ui_.tb_pgp->setDefaultAction(actions_->action("chat_pgp"));
+			connect(action, SIGNAL(triggered(bool)), SLOT(actPgpToggled(bool)));
+		}
+		else if (name == "chat_info") {
+			connect(action, SIGNAL(triggered()), SLOT(doInfo()));
+		}
+		else if (name == "chat_history") {
+			connect(action, SIGNAL(triggered()), SLOT(doHistory()));
+		}
+		else if (name == "chat_compact") {
+			connect(action, SIGNAL(triggered()), SLOT(toggleSmallChat()));
+		}
+		else if (name == "chat_ps") {
+			connect(action, SIGNAL(triggered()), SLOT(doPasteAndSend()));
+		}
+		else if (name == "chat_templates") {
+			action->setMenu(getTemplateMenu());
+		}
+		else if (name == "chat_active_contacts") {
+			connect(action, SIGNAL(triggered()), SLOT(actActiveContacts()));
+		}
+	}
 
-	act_active_contacts = new IconAction (tr("Active contacts"), "psi/jabber", tr("Active contacts"), 0, this);
-	connect(act_active_contacts, SIGNAL(triggered()), SLOT(actActiveContacts()));
+	list = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Common).at(0);
+	foreach (const QString &name, list->actions()) {
+		IconAction *action = list->action(name)->copy();
+		action->setParent(this);
+		actions_->addAction(name, action);
+	}
 }
 
 void PsiChatDlg::initToolBar()
@@ -508,28 +557,7 @@ void PsiChatDlg::initToolBar()
 	ui_.toolbar->setWindowTitle(tr("Chat Toolbar"));
 	int s = PsiIconset::instance()->system().iconSize();
 	ui_.toolbar->setIconSize(QSize(s, s));
-	ui_.toolbar->addAction(act_clear_);
-// typeahead find bar
-	ui_.toolbar->addAction(act_find);
-// -- typeahead
-	ui_.toolbar->addAction(act_html_text);
-	ui_.toolbar->addWidget(new StretchWidget(ui_.toolbar));
-	ui_.toolbar->addAction(act_icon_);
-	((QToolButton *)ui_.toolbar->widgetForAction(act_icon_))->setPopupMode(QToolButton::InstantPopup);
-	ui_.toolbar->addAction(act_templates_);
-	((QToolButton *)ui_.toolbar->widgetForAction(act_templates_))->setPopupMode(QToolButton::InstantPopup);
-	ui_.toolbar->addAction(act_ps_);
-	ui_.toolbar->addAction(act_file_);
-	if (PsiOptions::instance()->getOption("options.pgp.enable").toBool()) {
-		ui_.toolbar->addAction(act_pgp_);
-	}
-	ui_.toolbar->addAction(act_info_);
-	ui_.toolbar->addAction(act_history_);
-	if (AvCallManager::isSupported()) {
-		ui_.toolbar->addAction(act_voice_);
-	}
-	ui_.toolbar->addAction(act_add_contact);
-	ui_.toolbar->addAction(act_active_contacts);
+	updateToolbuttons();
 }
 
 void PsiChatDlg::contextMenuEvent(QContextMenuEvent *)
@@ -798,18 +826,18 @@ void PsiChatDlg::optionsUpdate()
 void PsiChatDlg::updatePGP()
 {
 	if (account()->hasPGP()) {
-		act_pgp_->setEnabled(true);
+		actions_->action("chat_pgp")->setEnabled(true);
 	}
 	else {
 		setPGPEnabled(false);
-		act_pgp_->setEnabled(false);
+		actions_->action("chat_pgp")->setEnabled(false);
 	}
 
 	checkPGPAutostart();
 
 	ui_.tb_pgp->setVisible(account()->hasPGP() &&
 						   !smallChat_ &&
-						   !PsiOptions::instance()->getOption("options.ui.chat.central-toolbar").toBool());
+						   !PsiOptions::instance()->getOption("options.ui.contactlist.toolbars.m0.visible").toBool());
 	ui_.log->setEncryptionEnabled(isEncryptionEnabled());
 }
 
@@ -865,7 +893,7 @@ void PsiChatDlg::doClearButton()
 
 void PsiChatDlg::setPGPEnabled(bool enabled)
 {
-	act_pgp_->setChecked(enabled);
+	actions_->action("chat_pgp")->setChecked(enabled);
 	ui_.log->setEncryptionEnabled(enabled);
 }
 
@@ -879,22 +907,22 @@ void PsiChatDlg::buildMenu()
 {
 	// Dialog menu
 	pm_settings_->clear();
-	pm_settings_->addAction(act_compact_);
-	pm_settings_->addAction(act_clear_);
+	pm_settings_->addAction(actions_->action("chat_compact"));
+	pm_settings_->addAction(actions_->action("chat_clear"));
 	pm_settings_->addSeparator();
 
-	pm_settings_->addAction(act_icon_);
-	pm_settings_->addAction(act_templates_);
-	pm_settings_->addAction(act_ps_);
-	pm_settings_->addAction(act_file_);
+	pm_settings_->addAction(actions_->action("chat_icon_"));
+	pm_settings_->addAction(actions_->action("chat_templates"));
+	pm_settings_->addAction(actions_->action("chat_ps"));
+	pm_settings_->addAction(actions_->action("chat_file"));
 	if (AvCallManager::isSupported()) {
-		pm_settings_->addAction(act_voice_);
+		pm_settings_->addAction(actions_->action("chat_voice"));
 	}
-	pm_settings_->addAction(act_pgp_);
+	pm_settings_->addAction(actions_->action("chat_pgp"));
 	pm_settings_->addSeparator();
 
-	pm_settings_->addAction(act_info_);
-	pm_settings_->addAction(act_history_);
+	pm_settings_->addAction(actions_->action("chat_info"));
+	pm_settings_->addAction(actions_->action("chat_history"));
 }
 
 void PsiChatDlg::updateCounter()
@@ -904,7 +932,7 @@ void PsiChatDlg::updateCounter()
 
 bool PsiChatDlg::isEncryptionEnabled() const
 {
-	return act_pgp_->isChecked();
+	return actions_->action("chat_pgp")->isChecked();
 }
 
 void PsiChatDlg::appendSysMsg(const QString &str)
@@ -1019,14 +1047,14 @@ void PsiChatDlg::doPasteAndSend()
 	if(ChatDlg::isActiveTab()) {
 		chatEdit()->paste();
 		doSend();
-		act_ps_->setEnabled(false);
+		actions_->action("chat_ps")->setEnabled(false);
 		QTimer::singleShot(2000, this, SLOT(psButtonEnabled()));
 	}
 }
 
 void PsiChatDlg::psButtonEnabled()
 {
-	act_ps_->setEnabled(true);
+	actions_->action("chat_ps")->setEnabled(true);
 }
 
 void PsiChatDlg::sendTemp(const QString &templText)
--- a/src/psichatdlg.h
+++ b/src/psichatdlg.h
@@ -12,7 +12,7 @@
 #include "typeaheadfind.h"
 #include "psiwindowheader.h"
 #include "widgets/actionlineedit.h"
-
+#include "actionlist.h"
 
 class IconAction;
 class PsiContact;
@@ -48,6 +48,7 @@ private slots:
 	void updateCountVisibility();
 	void updateContactAdding(PsiContact* c = 0);
 	void updateContactAdding(const Jid &j);
+	void updateToolbuttons();
 	void copyUserJid();
 
 	// reimplemented
@@ -94,20 +95,8 @@ private:
 
 	QMenu* pm_settings_;
 
-	IconAction* act_clear_;
-	IconAction* act_history_;
-	IconAction* act_info_;
-	IconAction* act_pgp_;
-	IconAction* act_icon_;
-	IconAction* act_file_;
-	IconAction* act_compact_;
-	IconAction* act_voice_;
+	ActionList* actions_;
 	TypeAheadFindBar *typeahead;
-	IconAction* act_find;
-	IconAction* act_ps_;
-	IconAction* act_templates_;
-	IconAction* act_html_text;
-	IconAction* act_add_contact;
 	QAction *act_mini_cmd_, *act_minimize_;
 
 	ActionLineEdit *le_autojid;
--- a/src/psioptions.cpp
+++ b/src/psioptions.cpp
@@ -31,10 +31,8 @@
 #include "statuspreset.h"
 #include "psitoolbar.h"
 #include "common.h"
-
 using namespace XMPP;
 
-
 // ----------------------------------------------------------------------------
 
 class OptionsStorageTask : public Task
@@ -183,6 +181,23 @@ bool PsiOptions::newProfile()
 	            ).toOptions(this);
 
 	{
+		QStringList pluginsKeys;
+		ToolbarPrefs chatToolbar;
+		chatToolbar.on = true;
+		chatToolbar.name = "Chat";
+		chatToolbar.keys << "chat_clear"  << "chat_find" << "chat_html_text" << "chat_add_contact";
+		chatToolbar.keys += pluginsKeys;
+		chatToolbar.keys << "spacer" << "chat_icon" << "chat_templates" << "chat_ps" << "chat_file"
+						 << "chat_pgp" << "chat_info" << "chat_history" << "chat_voice"
+						 << "chat_active_contacts";
+
+		ToolbarPrefs groupchatToolbar;
+		groupchatToolbar.on = true;
+		groupchatToolbar.name = "Groupchat";
+		groupchatToolbar.keys << "gchat_clear"  << "gchat_find" << "gchat_html_text" << "gchat_configure";
+		groupchatToolbar.keys += pluginsKeys;
+		groupchatToolbar.keys << "spacer" << "gchat_icon" << "gchat_templates" << "gchat_ps" ;
+
 		ToolbarPrefs buttons;
 		buttons.name = tr("Buttons");
 #ifndef Q_OS_MAC
@@ -203,7 +218,9 @@ bool PsiOptions::newProfile()
 		eventNotifier.dock = Qt3Dock_Bottom;
 
 		QList<ToolbarPrefs> toolbars;
-		toolbars << buttons
+		toolbars << chatToolbar
+		         << groupchatToolbar
+				 << buttons
 		         << showContacts
 		         << eventNotifier;
 		foreach(ToolbarPrefs tb, toolbars) {
@@ -372,4 +389,3 @@ void PsiOptions::resetOption(const QString &name)
 
 PsiOptions* PsiOptions::instance_ = NULL;
 PsiOptions* PsiOptions::defaults_ = NULL;
-
--- a/src/widgets/iconaction.cpp
+++ b/src/widgets/iconaction.cpp
@@ -57,7 +57,7 @@ public:
 		action = act;
 		Q_ASSERT(action);
 
-		if (parent->isWidgetType())
+		if (parent && parent->isWidgetType())
 			((QWidget *)parent)->addAction(action);
 
 #ifdef Q_OS_MAC
